// --------------------------------
// TestPFD.c++
// Brandon I. Smith
// --------------------------------

// https://code.google.com/p/googletest/wiki/V1_7_Primer#Basic_Assertions

// --------
// includes
// --------

#include <iostream> // cout, endl
#include <sstream>  // istringtstream, ostringstream
#include <string>   // string
#include <utility>  // pair
#include <vector>
#include <list>

#include "gtest/gtest.h"

#include "PFD.h"

using namespace std;

// -----------
// TestPFD
// -----------

// ----
// read
// ----

TEST(PFDFixture, read_0) {
	string s("1 10\n");
	vector<int> v;
	pfd_read(s, v);
	ASSERT_EQ( 2, v.size());
	ASSERT_EQ( 1, v[0]);
	ASSERT_EQ(10, v[1]);
}

TEST(PFDFixture, read_1) {
	string s("1 2 3 4 5 6 7 8 9 10\n");
	vector<int> v;
	pfd_read(s, v);
	ASSERT_EQ(10, v.size());
	ASSERT_EQ( 1, v[0]);
	ASSERT_EQ( 2, v[1]);
	ASSERT_EQ( 3, v[2]);
	ASSERT_EQ( 4, v[3]);
	ASSERT_EQ( 5, v[4]);
	ASSERT_EQ( 6, v[5]);
	ASSERT_EQ( 7, v[6]);
	ASSERT_EQ( 8, v[7]);
	ASSERT_EQ( 9, v[8]);
	ASSERT_EQ(10, v[9]);
}

TEST(PFDFixture, read_2) {
	string s("789 987 1776 65536\n");
	vector<int> v;
	pfd_read(s, v);
	ASSERT_EQ(    4, v.size());
	ASSERT_EQ(  789, v[0]);
	ASSERT_EQ(  987, v[1]);
	ASSERT_EQ( 1776, v[2]);
	ASSERT_EQ(65536, v[3]);
}

// ----
// eval
// ----

TEST(PFDFixture, eval_0) {
	ostringstream w;
	list<int> build_order;
	vector<list<int>> adjlist(5);
	adjlist[0] = {2, 4};
	adjlist[2] = {1, 3};
	adjlist[4] = {2, 1};
	vector<int> dep_count = {0, 2, 2, 1, 1};
	vector<bool> built(5);
	pfd_eval(build_order, adjlist, dep_count, built);
	pfd_print(w, build_order);
	ASSERT_EQ("1 5 3 2 4\n", w.str());
}

TEST(PFDFixture, eval_1) {
	ostringstream w;
	list<int> build_order;
	vector<list<int>> adjlist(8);
	adjlist[3] = {0, 1};
	adjlist[4] = {0, 2};
	adjlist[5] = {3};
	adjlist[6] = {3, 4};
	adjlist[7] = {2};
	vector<int> dep_count = {2, 1, 2, 2, 1, 0, 0, 0};
	vector<bool> built(5);
	pfd_eval(build_order, adjlist, dep_count, built);
	pfd_print(w, build_order);
	ASSERT_EQ("6 7 4 2 5 1 8 3\n", w.str());
}

// -----
// print
// -----

TEST(PFDFixture, print_0) {
	ostringstream w;
	vector<int> v = {1, 2, 3};
	pfd_print(w, v);
	ASSERT_EQ("1 2 3\n", w.str());
}

TEST(PFDFixture, print_1) {
	ostringstream w;
	vector<int> v = {};
	pfd_print(w, v);
	ASSERT_EQ("", w.str());
}

TEST(PFDFixture, print_2) {
	ostringstream w;
	vector<int> v = {1000000};
	pfd_print(w, v);
	ASSERT_EQ("1000000\n", w.str());
}

TEST(PFDFixture, print_3) {
	ostringstream w;
	vector<int> v = {789, 987, 1776, 65536};
	pfd_print(w, v);
	ASSERT_EQ("789 987 1776 65536\n", w.str());
}

TEST(PFDFixture, print_4) {
	ostringstream w;
	list<int> li;
	li.push_back(1);
	li.push_back(2);
	li.push_back(3);
	li.push_back(4);
	pfd_print(w, li);
	ASSERT_EQ("1 2 3 4\n", w.str());
}

// -----
// solve
// -----

TEST(PFDFixture, solve_0) {
	istringstream r("5 4\n3 2 1 5\n2 2 5 3\n4 1 3\n5 1 1\n");
	ostringstream w;
	pfd_solve(r, w);
	ASSERT_EQ("1 5 3 2 4\n", w.str());
}

TEST(PFDFixture, solve_1) {
	istringstream r("8 5\n1 2 4 5\n2 1 4\n3 2 5 8\n4 2 6 7\n5 1 7\n");
	ostringstream w;
	pfd_solve(r, w);
	ASSERT_EQ("6 7 4 2 5 1 8 3\n", w.str());
}

TEST(PFDFixture, solve_2) {
	istringstream r("100 99\n32 21 66 35 99 97 64 87 80 17 37 95 62 84 16 98 82 77 65 38 79 45 74\n29 21 51 67 59 72 56 61 94 36 70 5 71 21 39 49 63 76 44 33 69 23 55\n59 9 72 21 49 47 81 69 76 63 56\n88 1 9\n68 12 97 38 80 66 98 16 77 30 99 83 3 64\n95 5 30 99 80 27 77\n54 22 74 66 65 38 98 35 32 95 83 3 80 52 30 77 64 82 68 37 97 27 16 84\n6 2 34 61\n96 12 71 6 49 69 56 34 11 94 73 81 63 61\n82 11 83 27 98 80 35 79 68 97 37 16 17\n35 1 9\n72 4 69 6 47 34\n87 20 37 66 26 77 27 98 35 65 17 82 84 64 3 68 97 62 30 83 38 99\n11 3 34 49 56\n55 11 11 81 76 49 47 71 69 72 34 73 56\n20 9 12 86 15 19 41 46 43 13 10\n45 15 77 95 17 52 79 83 62 68 30 66 98 84 27 26 38\n77 1 35\n81 6 49 76 69 34 61 56\n23 23 94 39 69 61 70 36 81 49 33 59 5 6 56 76 55 34 63 47 21 73 8 42 24\n100 95 91 22 65 29 78 54 31 37 99 14 41 82 69 3 15 38 70 6 88 87 45 30 77 98 73 48 83 2 58 60 43 80 32 53 36 27 28 16 76 74 94 13 84 7 61 66 49 72 17 68 90 86 95 34 59 62 89 47 93 39 20 55 9 10 24 71 44 67 12 21 46 56 26 52 18 64 5 42 35 19 63 33 40 4 11 96 97 23 8 81 51 57 79 92 85\n26 13 30 3 79 82 77 37 68 64 35 95 99 17 66\n37 6 95 77 35 99 30 16\n27 2 77 79\n79 2 77 35\n21 10 81 76 34 71 6 72 49 61 94 56\n14 21 59 44 67 55 8 61 6 42 21 76 94 69 71 51 39 24 36 73 47 96 72\n60 3 86 43 31\n49 4 47 6 61 69\n8 21 49 96 56 33 55 94 44 34 71 69 81 5 59 76 47 72 36 39 6 11 24\n65 19 97 79 95 82 37 77 30 74 64 35 3 38 80 52 26 62 27 68 84\n76 9 61 56 94 11 49 6 47 72 34\n53 25 83 68 99 79 17 32 27 52 82 54 62 4 66 58 97 84 18 3 35 65 16 74 98 64 80\n31 4 43 19 13 10\n42 18 33 47 24 76 71 6 39 36 70 94 34 96 59 73 67 69 56 55\n97 10 98 16 80 95 79 38 52 99 35 37\n93 10 86 40 20 48 46 60 12 10 78 31\n52 6 95 79 16 35 80 37\n67 13 69 76 34 49 6 63 56 94 21 33 47 73 11\n1 99 94 84 75 19 27 93 60 70 13 32 86 38 63 21 25 53 44 15 2 59 48 92 87 68 57 6 8 96 35 95 11 100 88 20 5 17 65 37 54 64 85 24 40 71 3 97 90 82 69 49 41 72 77 51 79 22 98 67 58 74 18 45 73 66 7 47 16 43 55 14 26 61 36 4 50 39 46 12 78 31 89 42 10 23 33 30 76 62 29 9 28 83 99 80 52 81 56 34 91\n33 13 47 21 81 34 49 72 76 61 56 63 73 71 94\n89 1 88\n63 12 76 34 69 61 55 6 81 94 56 47 72 49\n10 1 9\n84 16 68 74 97 38 82 98 37 26 30 64 3 66 62 77 99 16\n40 2 10 13\n66 8 37 38 27 64 95 79 30 77\n41 7 19 40 15 46 86 31 43\n36 14 21 6 49 44 33 34 73 55 56 96 63 76 11 72\n51 20 49 8 39 76 55 94 85 69 24 21 42 44 70 71 56 6 5 11 36 59\n47 1 9\n22 13 20 40 15 2 41 57 12 60 31 13 19 86 46\n80 2 99 35\n58 23 79 17 38 54 37 82 80 77 87 32 95 74 26 68 99 45 98 27 16 3 84 30 4\n57 9 78 40 43 46 86 13 60 10 48\n78 6 12 41 31 46 10 19\n86 5 10 43 40 31 19\n17 10 35 83 3 27 52 98 95 30 64 99\n16 5 99 77 79 35 95\n12 4 31 19 40 43\n39 20 33 67 34 71 36 81 5 47 11 6 69 49 94 56 44 21 76 73 61 72\n69 4 61 6 47 34\n7 25 82 64 32 30 99 66 27 98 54 84 35 38 37 16 62 74 68 4 58 3 26 80 97 65 45\n50 95 87 56 7 62 66 65 22 55 40 94 83 36 52 34 78 46 16 35 74 63 12 51 89 23 47 2 13 57 92 49 42 60 68 41 98 69 30 71 61 81 3 70 4 39 82 21 20 91 33 90 43 24 88 97 67 10 11 77 29 59 18 17 48 28 85 64 45 54 14 37 72 53 93 5 27 58 32 95 73 8 44 31 76 9 26 80 99 96 19 6 84 86 79 15 38\n71 7 56 11 69 94 61 76 73\n28 12 10 13 86 2 43 31 93 22 60 57 40 12\n34 1 47\n91 1 90\n73 5 47 56 34 69 6\n48 12 10 20 41 40 46 86 60 78 31 43 13 12\n98 10 66 52 16 38 77 83 99 35 3 80\n43 3 40 13 10\n44 12 34 69 63 73 56 96 55 94 6 11 72 47\n18 18 68 16 30 35 27 26 74 83 80 3 79 66 84 17 95 64 87 37\n46 6 10 13 43 19 12 40\n61 1 47\n19 2 43 13\n74 15 64 16 99 3 62 52 30 95 37 38 82 83 27 97 68\n83 11 30 79 99 80 16 27 95 38 64 3 35\n75 95 72 98 42 89 81 94 20 63 26 12 53 19 58 66 76 96 48 44 47 99 65 90 49 10 69 88 97 92 21 77 4 39 46 15 7 41 78 11 18 91 40 34 67 32 3 45 14 27 36 38 57 86 33 60 16 64 82 54 85 28 73 71 70 95 9 79 2 8 61 80 51 29 68 13 55 62 93 23 35 74 6 22 30 31 56 87 37 24 43 59 17 52 84 5 83\n3 9 95 64 79 80 27 16 77 37 52\n5 19 34 47 96 36 76 71 49 44 63 6 73 61 81 11 33 56 69 55 94\n56 4 47 6 72 69\n30 4 35 77 79 99\n24 15 61 36 59 76 21 34 44 67 94 6 33 11 69 73 5\n99 4 35 27 79 77\n92 1 91\n4 17 16 99 32 68 95 37 82 80 74 26 98 87 84 66 64 79 62\n25 95 14 33 63 46 17 99 15 23 59 12 8 54 55 18 4 5 92 97 37 66 85 16 88 22 2 95 80 30 62 6 79 94 45 32 74 21 57 51 68 34 60 86 26 81 47 44 87 52 48 77 39 24 10 53 40 89 36 70 42 71 3 58 7 43 13 84 91 76 11 90 83 69 19 9 20 41 56 93 72 67 78 61 49 29 27 28 64 65 31 35 82 96 38 73 98\n90 1 89\n85 18 24 67 71 72 55 69 11 76 70 81 94 44 61 96 59 39 8 73\n13 1 10\n94 6 34 72 73 69 49 47\n64 7 95 30 77 79 80 99 27\n2 12 57 10 41 40 20 31 86 78 12 43 13 48\n38 5 77 27 79 35 99\n62 11 99 64 3 80 97 16 17 37 30 35 52\n15 6 40 19 31 10 13 43\n70 18 21 33 24 11 55 39 81 44 56 34 63 94 67 5 73 6 8 69\n");
	ostringstream w;
	pfd_solve(r, w);
	ASSERT_EQ("9 10 13 35 40 43 19 31 12 15 46 47 34 61 6 69 49 72 56 11 73 77 79 27 86 41 20 60 78 48 57 2 22 88 89 90 91 92 93 28 94 76 71 81 21 55 63 33 59 67 96 44 36 5 24 39 8 70 42 23 85 51 14 29 99 30 38 80 95 16 37 52 64 3 66 83 98 17 97 62 68 82 26 74 84 45 65 87 18 32 4 54 58 7 53 25 50 75 100 1\n", w.str());
}
